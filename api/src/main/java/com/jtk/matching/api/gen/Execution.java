/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.jtk.matching.api.gen;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Execution extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2390332132946013535L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Execution\",\"namespace\":\"com.jtk.matching.api.gen\",\"fields\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"execCreation\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"executedPrice\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}},{\"name\":\"executedQuantity\",\"type\":\"long\"},{\"name\":\"side\",\"type\":{\"type\":\"enum\",\"name\":\"Side\",\"namespace\":\"com.jtk.matching.api.gen.enums\",\"symbols\":[\"Buy\",\"Sell\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Execution> ENCODER =
      new BinaryMessageEncoder<Execution>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Execution> DECODER =
      new BinaryMessageDecoder<Execution>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Execution> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Execution> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Execution> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Execution>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Execution to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Execution from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Execution instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Execution fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence orderId;
  @Deprecated public java.time.Instant execCreation;
  @Deprecated public java.math.BigDecimal executedPrice;
  @Deprecated public long executedQuantity;
  @Deprecated public com.jtk.matching.api.gen.enums.Side side;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Execution() {}

  /**
   * All-args constructor.
   * @param orderId The new value for orderId
   * @param execCreation The new value for execCreation
   * @param executedPrice The new value for executedPrice
   * @param executedQuantity The new value for executedQuantity
   * @param side The new value for side
   */
  public Execution(java.lang.CharSequence orderId, java.time.Instant execCreation, java.math.BigDecimal executedPrice, java.lang.Long executedQuantity, com.jtk.matching.api.gen.enums.Side side) {
    this.orderId = orderId;
    this.execCreation = execCreation.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.executedPrice = executedPrice;
    this.executedQuantity = executedQuantity;
    this.side = side;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return orderId;
    case 1: return execCreation;
    case 2: return executedPrice;
    case 3: return executedQuantity;
    case 4: return side;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: orderId = (java.lang.CharSequence)value$; break;
    case 1: execCreation = (java.time.Instant)value$; break;
    case 2: executedPrice = (java.math.BigDecimal)value$; break;
    case 3: executedQuantity = (java.lang.Long)value$; break;
    case 4: side = (com.jtk.matching.api.gen.enums.Side)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'orderId' field.
   * @return The value of the 'orderId' field.
   */
  public java.lang.CharSequence getOrderId() {
    return orderId;
  }


  /**
   * Sets the value of the 'orderId' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.orderId = value;
  }

  /**
   * Gets the value of the 'execCreation' field.
   * @return The value of the 'execCreation' field.
   */
  public java.time.Instant getExecCreation() {
    return execCreation;
  }


  /**
   * Sets the value of the 'execCreation' field.
   * @param value the value to set.
   */
  public void setExecCreation(java.time.Instant value) {
    this.execCreation = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'executedPrice' field.
   * @return The value of the 'executedPrice' field.
   */
  public java.math.BigDecimal getExecutedPrice() {
    return executedPrice;
  }


  /**
   * Sets the value of the 'executedPrice' field.
   * @param value the value to set.
   */
  public void setExecutedPrice(java.math.BigDecimal value) {
    this.executedPrice = value;
  }

  /**
   * Gets the value of the 'executedQuantity' field.
   * @return The value of the 'executedQuantity' field.
   */
  public long getExecutedQuantity() {
    return executedQuantity;
  }


  /**
   * Sets the value of the 'executedQuantity' field.
   * @param value the value to set.
   */
  public void setExecutedQuantity(long value) {
    this.executedQuantity = value;
  }

  /**
   * Gets the value of the 'side' field.
   * @return The value of the 'side' field.
   */
  public com.jtk.matching.api.gen.enums.Side getSide() {
    return side;
  }


  /**
   * Sets the value of the 'side' field.
   * @param value the value to set.
   */
  public void setSide(com.jtk.matching.api.gen.enums.Side value) {
    this.side = value;
  }

  /**
   * Creates a new Execution RecordBuilder.
   * @return A new Execution RecordBuilder
   */
  public static com.jtk.matching.api.gen.Execution.Builder newBuilder() {
    return new com.jtk.matching.api.gen.Execution.Builder();
  }

  /**
   * Creates a new Execution RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Execution RecordBuilder
   */
  public static com.jtk.matching.api.gen.Execution.Builder newBuilder(com.jtk.matching.api.gen.Execution.Builder other) {
    if (other == null) {
      return new com.jtk.matching.api.gen.Execution.Builder();
    } else {
      return new com.jtk.matching.api.gen.Execution.Builder(other);
    }
  }

  /**
   * Creates a new Execution RecordBuilder by copying an existing Execution instance.
   * @param other The existing instance to copy.
   * @return A new Execution RecordBuilder
   */
  public static com.jtk.matching.api.gen.Execution.Builder newBuilder(com.jtk.matching.api.gen.Execution other) {
    if (other == null) {
      return new com.jtk.matching.api.gen.Execution.Builder();
    } else {
      return new com.jtk.matching.api.gen.Execution.Builder(other);
    }
  }

  /**
   * RecordBuilder for Execution instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Execution>
    implements org.apache.avro.data.RecordBuilder<Execution> {

    private java.lang.CharSequence orderId;
    private java.time.Instant execCreation;
    private java.math.BigDecimal executedPrice;
    private long executedQuantity;
    private com.jtk.matching.api.gen.enums.Side side;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.jtk.matching.api.gen.Execution.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.execCreation)) {
        this.execCreation = data().deepCopy(fields()[1].schema(), other.execCreation);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.executedPrice)) {
        this.executedPrice = data().deepCopy(fields()[2].schema(), other.executedPrice);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.executedQuantity)) {
        this.executedQuantity = data().deepCopy(fields()[3].schema(), other.executedQuantity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.side)) {
        this.side = data().deepCopy(fields()[4].schema(), other.side);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Execution instance
     * @param other The existing instance to copy.
     */
    private Builder(com.jtk.matching.api.gen.Execution other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.orderId)) {
        this.orderId = data().deepCopy(fields()[0].schema(), other.orderId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.execCreation)) {
        this.execCreation = data().deepCopy(fields()[1].schema(), other.execCreation);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.executedPrice)) {
        this.executedPrice = data().deepCopy(fields()[2].schema(), other.executedPrice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.executedQuantity)) {
        this.executedQuantity = data().deepCopy(fields()[3].schema(), other.executedQuantity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.side)) {
        this.side = data().deepCopy(fields()[4].schema(), other.side);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'orderId' field.
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return orderId;
    }


    /**
      * Sets the value of the 'orderId' field.
      * @param value The value of 'orderId'.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.orderId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'orderId' field has been set.
      * @return True if the 'orderId' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'orderId' field.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder clearOrderId() {
      orderId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'execCreation' field.
      * @return The value.
      */
    public java.time.Instant getExecCreation() {
      return execCreation;
    }


    /**
      * Sets the value of the 'execCreation' field.
      * @param value The value of 'execCreation'.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder setExecCreation(java.time.Instant value) {
      validate(fields()[1], value);
      this.execCreation = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'execCreation' field has been set.
      * @return True if the 'execCreation' field has been set, false otherwise.
      */
    public boolean hasExecCreation() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'execCreation' field.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder clearExecCreation() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'executedPrice' field.
      * @return The value.
      */
    public java.math.BigDecimal getExecutedPrice() {
      return executedPrice;
    }


    /**
      * Sets the value of the 'executedPrice' field.
      * @param value The value of 'executedPrice'.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder setExecutedPrice(java.math.BigDecimal value) {
      validate(fields()[2], value);
      this.executedPrice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'executedPrice' field has been set.
      * @return True if the 'executedPrice' field has been set, false otherwise.
      */
    public boolean hasExecutedPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'executedPrice' field.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder clearExecutedPrice() {
      executedPrice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'executedQuantity' field.
      * @return The value.
      */
    public long getExecutedQuantity() {
      return executedQuantity;
    }


    /**
      * Sets the value of the 'executedQuantity' field.
      * @param value The value of 'executedQuantity'.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder setExecutedQuantity(long value) {
      validate(fields()[3], value);
      this.executedQuantity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'executedQuantity' field has been set.
      * @return True if the 'executedQuantity' field has been set, false otherwise.
      */
    public boolean hasExecutedQuantity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'executedQuantity' field.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder clearExecutedQuantity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'side' field.
      * @return The value.
      */
    public com.jtk.matching.api.gen.enums.Side getSide() {
      return side;
    }


    /**
      * Sets the value of the 'side' field.
      * @param value The value of 'side'.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder setSide(com.jtk.matching.api.gen.enums.Side value) {
      validate(fields()[4], value);
      this.side = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'side' field has been set.
      * @return True if the 'side' field has been set, false otherwise.
      */
    public boolean hasSide() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'side' field.
      * @return This builder.
      */
    public com.jtk.matching.api.gen.Execution.Builder clearSide() {
      side = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Execution build() {
      try {
        Execution record = new Execution();
        record.orderId = fieldSetFlags()[0] ? this.orderId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.execCreation = fieldSetFlags()[1] ? this.execCreation : (java.time.Instant) defaultValue(fields()[1]);
        record.executedPrice = fieldSetFlags()[2] ? this.executedPrice : (java.math.BigDecimal) defaultValue(fields()[2]);
        record.executedQuantity = fieldSetFlags()[3] ? this.executedQuantity : (java.lang.Long) defaultValue(fields()[3]);
        record.side = fieldSetFlags()[4] ? this.side : (com.jtk.matching.api.gen.enums.Side) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Execution>
    WRITER$ = (org.apache.avro.io.DatumWriter<Execution>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Execution>
    READER$ = (org.apache.avro.io.DatumReader<Execution>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










